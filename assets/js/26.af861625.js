(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{510:function(v,_,t){"use strict";t.r(_);var a=t(4),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"浏览器渲染流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染流程"}},[v._v("#")]),v._v(" 浏览器渲染流程")]),v._v(" "),t("h3",{attrs:{id:"浏览器多进程架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器多进程架构"}},[v._v("#")]),v._v(" 浏览器多进程架构")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("浏览器主进程")]),v._v(" "),t("p",[v._v("主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")])]),v._v(" "),t("li",[t("p",[v._v("渲染进程")]),v._v(" "),t("p",[v._v("核心任务是将HTML、CSS和JavaScript转换为用户可以与之交互的网页，排版引擎Blink和JavaScript引擎V8都是运行在该进程中，默认情况下，Chrome会为每个Tab标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")])]),v._v(" "),t("li",[t("p",[v._v("GPU进程")]),v._v(" "),t("p",[v._v("Chrome刚开始发布的时候没有GPU进程，GPU的使用初衷是为了实现3D CSS的效果，只是随后网页、Chrome的UI界面都选择采用GPU来绘制，这使得GPU成为浏览器普遍的需求。最后，Chrome在其多进程架构上也引入了GPU进程。")])]),v._v(" "),t("li",[t("p",[v._v("网络进程")]),v._v(" "),t("p",[v._v("主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，最近才独立出来，成为一个单独的进程。")])]),v._v(" "),t("li",[t("p",[v._v("插件进程")]),v._v(" "),t("p",[v._v("主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])])]),v._v(" "),t("h3",{attrs:{id:"从输入url到页面展示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从输入url到页面展示"}},[v._v("#")]),v._v(" 从输入URL到页面展示")]),v._v(" "),t("h4",{attrs:{id:"大致流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大致流程"}},[v._v("#")]),v._v(" 大致流程")]),v._v(" "),t("p",[v._v("首先，用户从浏览器进程里"),t("strong",[v._v("输入请求信息")])]),v._v(" "),t("p",[v._v("然后，网络进程"),t("strong",[v._v("发起URL请求")])]),v._v(" "),t("p",[v._v("服务器响应URL请求之后，浏览器进程就要开始"),t("strong",[v._v("准备渲染进程")]),v._v("了")]),v._v(" "),t("p",[v._v("渲染进程准备好之后，需要先向渲染进程提交页面数据，我们称之为"),t("strong",[v._v("提交文档")]),v._v("阶段")]),v._v(" "),t("p",[v._v("渲染进程接受完文档信息之后，便开始"),t("strong",[v._v("解析页面和加载子资源")]),v._v("，完成页面的渲染。")]),v._v(" "),t("p",[t("strong",[v._v("用户发出URL请求到页面开始解析的这个过程，就叫做导航。")])]),v._v(" "),t("h4",{attrs:{id:"用户输入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用户输入"}},[v._v("#")]),v._v(" 用户输入")]),v._v(" "),t("p",[v._v("当用户在地址栏输入查询关键字时，地址栏回判断输入的关键字是搜索内容，还是请求的URL，如果判断符合URL规则，比如baidu.com，那么地址栏会根据规则，把这段内容加上协议，合成完整的URL，如https://www.baidu.com/")]),v._v(" "),t("p",[v._v("当浏览器刚开始加载一个地址之后，标签页上的图标进入加载状态，但是页面现实的仍然是之前打开的页面内容，因为需要等待提交文档阶段，页面内容才会被替换。")]),v._v(" "),t("h4",{attrs:{id:"url请求过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#url请求过程"}},[v._v("#")]),v._v(" URL请求过程")]),v._v(" "),t("p",[v._v("浏览器进程会通过进程间通信（IPC）把URL请求发送至网络进程，网络进程接收到URL请求后，会在这里发起真正的URL请求流程。")]),v._v(" "),t("p",[v._v("首先，网络进程会查找本地缓存是否缓存了该资源。如果有缓存资源，则直接返回资源给浏览器进程；如果没有查找到缓存资源，那么直接进入网络请求流程。")]),v._v(" "),t("p",[v._v("第一步是要进行DNS解析，以获取请求域名的服务器IP地址。如果请求协议是HTTPS，那么还需要建立TLS连接。")]),v._v(" "),t("p",[v._v("接下来是利用IP地址和服务器建立TCP连接。连接建立之后，浏览器会构建请求行、请求头等信息，并把和该域名相关的cookie等数据附加到请求头中，然后向服务器发送构建的请求信息。")]),v._v(" "),t("p",[v._v("服务器接收到请求信息后，会根据请求信息生成响应数据（包括响应行、响应头和响应体等信息），并发给网络进程。等网络进程接收了响应行和响应头之后，就开始解析响应的内容。")]),v._v(" "),t("h5",{attrs:{id:"（1）重定向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#（1）重定向"}},[v._v("#")]),v._v(" （1）重定向")]),v._v(" "),t("p",[v._v("在接收到服务器返回的响应后，网络进程开始解析响应，如果发现返回的状态码是301或者302，那么说明服务器需要浏览器重定向到其他URL。这时网络进程会从响应头的Location字段里读取重定向的地址，然后在发起新的请求。如果响应行是200，则表示浏览器可以继续处理该请求。")]),v._v(" "),t("h5",{attrs:{id:"（2）响应数据类型梳理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#（2）响应数据类型梳理"}},[v._v("#")]),v._v(" （2）响应数据类型梳理")]),v._v(" "),t("p",[v._v("Content-Type是HTTP头中一个非常重要的字段它告诉浏览器服务器返回的响应体数据是什么类型，然后浏览器会根据Content-Type的值来决定如何显示响应体的内容。")]),v._v(" "),t("p",[v._v("如果Content-Type字段的值被浏览器判断为下载类型，那么该请求会被提交给浏览器的下载管理器，同时该URL请求的导航流程就此结束。如果是HTML，那么浏览器则会即系进行导航流程。由于Chrome的页面渲染是运行在渲染进程中的，所以接下来就需要准备渲染进程了。")]),v._v(" "),t("h4",{attrs:{id:"准备渲染进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备渲染进程"}},[v._v("#")]),v._v(" 准备渲染进程")]),v._v(" "),t("p",[v._v("默认情况下，Chrome会为每个页面分配一个渲染进程，但是"),t("strong",[v._v("属于同一站点（same-site）的多个页面会同时运行在一个渲染进程中")]),v._v("。")]),v._v(" "),t("p",[v._v("同一站点定义为**根域名（例如baidu.com）"),t("strong",[v._v("加上")]),v._v("协议（例如https://或者http://）**相同，包含了该根域名下的所有子域名和不同的端口，比如：")]),v._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[v._v("https"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("zhidao"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("baodu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("com\nhttps"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("www"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("baodu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("com\nhttps"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("www"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("baodu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("com"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("8080")]),v._v("\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br")])]),t("p",[v._v("Chrome的默认策略是，每个标签对应一个渲染进程。但如果从一个页面打开了另一个新页面，而新页面和当前页面属于同一站点的话，那么新页面会复用父页面的渲染进程；其他情况下，浏览器进程则会为新页面创建一个新的渲染进程。")]),v._v(" "),t("p",[v._v("渲染进程准备好之后，还不能立即进入文档解析状态，因为此时的文档数据还在网络进程中，并没有提交给渲染进程，所以下一步进入了提交文档阶段。")]),v._v(" "),t("h4",{attrs:{id:"提交文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提交文档"}},[v._v("#")]),v._v(" 提交文档")]),v._v(" "),t("p",[v._v("这里的“文档”是指URL请求的响应体数据。")]),v._v(" "),t("p",[v._v("“提交文档”的消息是由浏览器进程发出的，渲染进程接收到“提交文档”的消息后，会和网络进程建立传输数据的“管道”。")]),v._v(" "),t("p",[v._v("等文档数据传输完成之后，渲染进程会返回“确认提交”的消息给浏览器进程。")]),v._v(" "),t("p",[v._v("浏览器进程收到消息后，会"),t("strong",[v._v("更新浏览器界面状态")]),v._v("，包括了安全状态、地址栏的URL、前进后退的历史状态，并更新web页面。")]),v._v(" "),t("p",[v._v("一个完整的导航流程走完了，之后进入渲染阶段。")]),v._v(" "),t("h4",{attrs:{id:"渲染阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染阶段"}},[v._v("#")]),v._v(" 渲染阶段")]),v._v(" "),t("p",[v._v("一旦文档被提交，渲染进程便开始页面解析和子资源加载。")]),v._v(" "),t("p",[v._v("渲染模块在执行过程中会被划分为很多子阶段，按照时间顺序，可分为：构建DOM树、样式计算、布局阶段、分层、绘制、分块、光栅化和合成。")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("构建DOM树")]),v._v(" "),t("p",[v._v("因为浏览器无法直接理解和使用HTML，所以需要将HTML转换为浏览器能够理解的结构--DOM树。")]),v._v(" "),t("p",[v._v("构建DOM树的输入内容是一个HTML文件，然后经过HTML解析器解析，最终输出树状结构的DOM。")])]),v._v(" "),t("li",[t("p",[v._v("样式计算")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("把CSS转换为浏览器能够理解的结构")]),v._v(" "),t("p",[v._v("当渲染引擎接收到CSS文本时，会执行一个转换操作，将CSS文本转换为浏览器可以理解的结构--styleSheets。该结构同时具备了查询和修改功能。")])]),v._v(" "),t("li",[t("p",[v._v("转换样式表中的属性值，使其标准化")]),v._v(" "),t("p",[v._v("CSS文本中有很多属性值，如2em、blue、bold这类数值不容易被渲染引擎理解，需要将所有值转换为渲染引擎容易理解的、标准化的计算值。")])]),v._v(" "),t("li",[t("p",[v._v("计算出DOM树中每个节点的具体样式")]),v._v(" "),t("p",[v._v("根据CSS的继承规则和层叠规则，最终输出内容是每个DOM节点的样式，并被保存在ComputedStyle的结构内。")])])])]),v._v(" "),t("li",[t("p",[v._v("布局阶段")]),v._v(" "),t("p",[v._v("接下来需要计算出DOM树中可见元素的几何位置，这个计算过程叫做布局。")]),v._v(" "),t("p",[v._v("Chrome在布局阶段需要完成两个任务：创建布局树和布局计算。")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("创建"),t("strong",[v._v("布局树")])]),v._v(" "),t("p",[v._v("遍历DOM树中的所有可见节点，并把这些节点加到布局中，而不可见的节点会被布局树忽略掉，如head标签下面的全部内容，以及属性包含display:none的元素。")])]),v._v(" "),t("li",[t("p",[v._v("布局计算")]),v._v(" "),t("p",[v._v("有了完整的布局树，接下来就要计算布局树节点的坐标位置。")])])])]),v._v(" "),t("li",[t("p",[v._v("分层")]),v._v(" "),t("p",[v._v("为了更方便的实现一些的效果，如一些复杂的3D变换、页面滚动、或者使用z-index做z轴排序等，渲染引擎还需要为特定的节点生成专用的图层，并生成一颗对应的"),t("strong",[v._v("图层树（LayerTree）")]),v._v("。")]),v._v(" "),t("p",[v._v("通常情况下，并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的层，那么这个节点就从属于父节点的图层。")]),v._v(" "),t("p",[v._v("满足下面两点中任意一点的元素就可以被提升为单独的图层。")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("拥有层叠上下文属性（定位属性、透明、CSS滤镜等）")])]),v._v(" "),t("li",[t("p",[v._v("需要裁剪的地方（overflow）")])])])]),v._v(" "),t("li",[t("p",[v._v("图层绘制")]),v._v(" "),t("p",[v._v("渲染引擎会把一个图层的绘制拆分成很多小的绘制指令，然后把这些指令按照顺序组成一个待绘制列表")])]),v._v(" "),t("li",[t("p",[v._v("栅格化操作")]),v._v(" "),t("p",[v._v("绘制列表只是用来记录绘制顺序和绘制指令的列表，而实际上绘制操作是由渲染引擎中的合成线程来完成。当图层的绘制列表准备好之后，主线程会把该绘制列表提交（commit）给合成线程。")]),v._v(" "),t("p",[v._v("合成线程会按照视口附近的图块来优先生成位图，实际生成位图的操作是由栅格化来执行的。所谓栅格化，是指将图块转换为位图。")]),v._v(" "),t("p",[v._v("通常，栅格化过程都会使用GPU来加速生成，使用GPU生成位图的过程叫快速栅格化，生成的位图被保存在GPU内存中。")])]),v._v(" "),t("li",[t("p",[v._v("合成和显示")]),v._v(" "),t("p",[v._v("所有图块都被光栅化，合成线程就会生成一个绘制图块的命令，然后提交给浏览器进程。然后浏览器进程根据命令，将页面内容绘制到内存中，最后再将内存显示在屏幕上。")])])]),v._v(" "),t("h4",{attrs:{id:"渲染流水线总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染流水线总结"}},[v._v("#")]),v._v(" 渲染流水线总结")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://t1.picb.cc/uploads/2020/02/26/khx5pa.jpg",alt:"khx5pa.jpg"}})]),v._v(" "),t("p",[v._v("一个完整的渲染流程大致可总结为：")]),v._v(" "),t("ol",[t("li",[v._v("渲染进程将HTML内容转换为能够读懂的"),t("strong",[v._v("DOM树")]),v._v("结构。")]),v._v(" "),t("li",[v._v("渲染引擎将CSS样式表转化为浏览器可以理解的"),t("strong",[v._v("styleSheets")]),v._v("，计算出DOM节点的样式。")]),v._v(" "),t("li",[v._v("创建"),t("strong",[v._v("布局树")]),v._v("，并计算元素的布局信息。")]),v._v(" "),t("li",[v._v("对布局树进行分层，并生成"),t("strong",[v._v("分层树")]),v._v("。")]),v._v(" "),t("li",[v._v("为每个图层生成"),t("strong",[v._v("绘制列表")]),v._v("，并将其提交到合成线程。")]),v._v(" "),t("li",[v._v("合成线程将图层分成"),t("strong",[v._v("图块")]),v._v("，并在"),t("strong",[v._v("光栅化线程池")]),v._v("中将图块转换成位图。")]),v._v(" "),t("li",[v._v("合成线程发送绘制图块命令"),t("strong",[v._v("DrawQuad")]),v._v("给浏览器进程。")]),v._v(" "),t("li",[v._v("浏览器进程根据DrawQuad消息"),t("strong",[v._v("生成页面")]),v._v("，并显示到显示器上。")])])])}),[],!1,null,null,null);_.default=s.exports}}]);