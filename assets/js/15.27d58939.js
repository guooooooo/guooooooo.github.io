(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{512:function(t,e,s){"use strict";s.r(e);var a=s(4),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"响应式原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应式原理"}},[t._v("#")]),t._v(" 响应式原理")]),t._v(" "),s("p",[t._v("Vue.js实现响应式的核心是利用了ES5的"),s("code",[t._v("Object.defineProperty")]),t._v("，这也是Vue.js不能兼容IE8及以下浏览器的原因。")]),t._v(" "),s("h3",{attrs:{id:"object-defineproperty"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty"}},[t._v("#")]),t._v(" Object.defineProperty")]),t._v(" "),s("p",[s("code",[t._v("Object.defineProperty")]),t._v("方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" descriptor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("code",[t._v("descriptor")]),t._v("是将被定义或修改的属性描述符。")]),t._v(" "),s("blockquote",[s("p",[t._v("对象里目前存在的属性描述符有两种主要形式："),s("strong",[t._v("数据描述符")]),t._v("和"),s("strong",[t._v("存取描述符")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("描述符必须是这两种形式之一；不能同时是两者")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("数据描述符和存取描述符均具有")]),t._v("以下可选键值(默认值是在使用Object.defineProperty()定义属性的情况下)：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("configurable")])])]),t._v(" "),s("p",[t._v("当且仅当该属性的 configurable 为 true 时，该属性"),s("code",[t._v("描述符")]),t._v("才能够被改变，同时该属性也能从对应的对象上被删除。"),s("strong",[t._v("默认为 false")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("enumerable")])])]),t._v(" "),s("p",[t._v("当且仅当该属性的"),s("code",[t._v("enumerable")]),t._v("为"),s("code",[t._v("true")]),t._v("时，该属性才能够出现在对象的枚举属性中。"),s("strong",[t._v("默认为 false")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("数据描述符同时具有以下可选键值")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("value")])])]),t._v(" "),s("p",[t._v("该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。"),s("strong",[t._v("默认为 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("undefined")]),s("OutboundLink")],1)]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("writable")])]),t._v(" "),s("p",[t._v("当且仅当该属性的"),s("code",[t._v("writable")]),t._v("为"),s("code",[t._v("true")]),t._v("时，"),s("code",[t._v("value")]),t._v("才能被"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment_Operators",target:"_blank",rel:"noopener noreferrer"}},[t._v("赋值运算符"),s("OutboundLink")],1),t._v("改变。"),s("strong",[t._v("默认为 false")]),t._v("。")])])]),t._v(" "),s("p",[s("strong",[t._v("存取描述符同时具有以下可选键值")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("get")])]),t._v(" "),s("p",[t._v("一个给属性提供 getter 的方法，如果没有 getter 则为 "),s("code",[t._v("undefined")]),t._v("。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入"),s("code",[t._v("this")]),t._v("对象（由于继承关系，这里的"),s("code",[t._v("this")]),t._v("并不一定是定义该属性的对象）。")]),t._v(" "),s("p",[s("strong",[t._v("默认为 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("undefined")]),s("OutboundLink")],1)]),t._v("。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("set")])]),t._v(" "),s("p",[t._v("一个给属性提供 setter 的方法，如果没有 setter 则为 "),s("code",[t._v("undefined")]),t._v("。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。")]),t._v(" "),s("p",[s("strong",[t._v("默认为 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined",target:"_blank",rel:"noopener noreferrer"}},[s("code",[t._v("undefined")]),s("OutboundLink")],1)]),t._v("。")])])])]),t._v(" "),s("p",[t._v("一旦对象拥有了getter和setter，我们可以简单的把这个对象称为响应式对象。")]),t._v(" "),s("h3",{attrs:{id:"initstate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#initstate"}},[t._v("#")]),t._v(" initState")]),t._v(" "),s("p",[t._v("在Vue的初始化阶段，"),s("code",[t._v("_init")]),t._v("方法执行的时候，会执行"),s("code",[t._v("initState(vm)")]),t._v("方法，该方法主要是对"),s("code",[t._v("props")]),t._v("、"),s("code",[t._v("methods")]),t._v("、"),s("code",[t._v("data")]),t._v("、"),s("code",[t._v("computed")]),t._v("和"),s("code",[t._v("watcher")]),t._v("等属性做了初始化操作。")]),t._v(" "),s("p",[t._v("这里主要看"),s("code",[t._v("props")]),t._v("和"),s("code",[t._v("data")]),t._v("的过程。")]),t._v(" "),s("p",[s("code",[t._v("props")]),t._v("的初始化主要过程，是遍历定义的"),s("code",[t._v("props")]),t._v("配置，先调用"),s("code",[t._v("defineReactive")]),t._v("方法将每个"),s("code",[t._v("prop")]),t._v("对应的值变成响应式，可以通过"),s("code",[t._v("vm._props.xxx")]),t._v("访问到定义"),s("code",[t._v("props")]),t._v("中对应的属性。然后通过"),s("code",[t._v("proxy")]),t._v("把"),s("code",[t._v("vm._props.xxx")]),t._v("的访问代理到"),s("code",[t._v("vm.xxx")]),t._v("上。")]),t._v(" "),s("p",[s("code",[t._v("data")]),t._v(" 的初始化主要过程，一个是对定义 "),s("code",[t._v("data")]),t._v(" 函数返回对象的遍历，通过 "),s("code",[t._v("proxy")]),t._v(" 把每一个值 "),s("code",[t._v("vm._data.xxx")]),t._v(" 都代理到 "),s("code",[t._v("vm.xxx")]),t._v(" 上；另一个是调用 "),s("code",[t._v("observe")]),t._v(" 方法观测整个 "),s("code",[t._v("data")]),t._v(" 的变化，把 "),s("code",[t._v("data")]),t._v(" 也变成响应式。")]),t._v(" "),s("h3",{attrs:{id:"proxy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[t._v("#")]),t._v(" proxy")]),t._v(" "),s("p",[s("code",[t._v("proxy")]),t._v("的作用是把 "),s("code",[t._v("props")]),t._v(" 和 "),s("code",[t._v("data")]),t._v(" 上的属性代理到 "),s("code",[t._v("vm")]),t._v(" 实例上。")]),t._v(" "),s("p",[s("code",[t._v("proxy")]),t._v(" 方法的实现很简单，通过 "),s("code",[t._v("Object.defineProperty")]),t._v(" 把 "),s("code",[t._v("target[sourceKey][key]")]),t._v(" 的读写变成了对 "),s("code",[t._v("target[key]")]),t._v(" 的读写。所以对于 "),s("code",[t._v("props")]),t._v(" 而言，对 "),s("code",[t._v("vm._props.xxx")]),t._v(" 的读写变成了 "),s("code",[t._v("vm.xxx")]),t._v(" 的读写，而对于 "),s("code",[t._v("vm._props.xxx")]),t._v(" 我们可以访问到定义在 "),s("code",[t._v("props")]),t._v(" 中的属性，所以我们就可以通过 "),s("code",[t._v("vm.xxx")]),t._v(" 访问到定义在 "),s("code",[t._v("props")]),t._v(" 中的 "),s("code",[t._v("xxx")]),t._v(" 属性了。")]),t._v(" "),s("h3",{attrs:{id:"observe"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observe"}},[t._v("#")]),t._v(" observe")]),t._v(" "),s("p",[s("code",[t._v("observe")]),t._v(" 的功能就是用来监测数据的变化。"),s("code",[t._v("observe")]),t._v(" 方法的作用就是给非 VNode 的对象类型数据添加一个 "),s("code",[t._v("Observer")]),t._v("，如果已经添加过则直接返回，否则在满足一定条件下去实例化一个 "),s("code",[t._v("Observer")]),t._v(" 对象实例。")]),t._v(" "),s("h3",{attrs:{id:"observer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observer"}},[t._v("#")]),t._v(" Observer")]),t._v(" "),s("p",[s("code",[t._v("Observer")]),t._v(" 是一个类，它的作用是给对象的属性添加 getter 和 setter，用于依赖收集和派发更新。")]),t._v(" "),s("p",[s("code",[t._v("Observer")]),t._v(" 的构造函数逻辑很简单，首先实例化 "),s("code",[t._v("Dep")]),t._v(" 对象，赋值给"),s("code",[t._v("Observer")]),t._v("的"),s("code",[t._v("dep")]),t._v("属性。接着通过执行 "),s("code",[t._v("def")]),t._v(" 函数把自身实例添加到数据对象 "),s("code",[t._v("value")]),t._v(" 的 "),s("code",[t._v("__ob__")]),t._v(" 属性上。"),s("code",[t._v("def")]),t._v(" 函数是一个非常简单的"),s("code",[t._v("Object.defineProperty")]),t._v(" 的封装，这就是为什么在开发中输出 "),s("code",[t._v("data")]),t._v(" 上对象类型的数据，会发现该对象多了一个 "),s("code",[t._v("__ob__")]),t._v(" 的属性。")]),t._v(" "),s("p",[t._v("回到 "),s("code",[t._v("Observer")]),t._v(" 的构造函数，接下来会对 "),s("code",[t._v("value")]),t._v(" 做判断，对于数组会调用 "),s("code",[t._v("observeArray")]),t._v(" 方法，否则对纯对象调用 "),s("code",[t._v("walk")]),t._v(" 方法。可以看到 "),s("code",[t._v("observeArray")]),t._v(" 是遍历数组再次调用 "),s("code",[t._v("observe")]),t._v(" 方法，而 "),s("code",[t._v("walk")]),t._v(" 方法是遍历对象的 key 调用 "),s("code",[t._v("defineReactive")]),t._v(" 方法。")]),t._v(" "),s("h3",{attrs:{id:"definereactive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#definereactive"}},[t._v("#")]),t._v(" defineReactive")]),t._v(" "),s("p",[s("code",[t._v("defineReactive")]),t._v(" 的功能就是定义一个响应式对象，给对象动态添加 getter 和 setter。")]),t._v(" "),s("p",[s("code",[t._v("defineReactive")]),t._v(" 函数最开始初始化 "),s("code",[t._v("Dep")]),t._v(" 对象的实例，接着拿到 "),s("code",[t._v("obj")]),t._v(" 的属性描述符，然后对子对象递归调用 "),s("code",[t._v("observe")]),t._v(" 方法，这样就保证了无论 "),s("code",[t._v("obj")]),t._v(" 的结构多复杂，它的所有子属性也能变成响应式的对象，这样我们访问或修改 "),s("code",[t._v("obj")]),t._v(" 中一个嵌套较深的属性，也能触发 getter 和 setter。最后利用 "),s("code",[t._v("Object.defineProperty")]),t._v(" 去给 "),s("code",[t._v("obj")]),t._v(" 的属性 "),s("code",[t._v("key")]),t._v(" 添加 getter 和 setter。目的就是为了在我们访问数据以及写数据的时候能自动执行一些逻辑：getter 做的事情是依赖收集，setter 做的事情是派发更新。")]),t._v(" "),s("h2",{attrs:{id:"依赖收集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#依赖收集"}},[t._v("#")]),t._v(" 依赖收集")]),t._v(" "),s("p",[t._v("Vue 会把普通对象变成响应式对象，响应式对象 getter 相关的逻辑就是做依赖收集。一个是 "),s("code",[t._v("const dep = new Dep()")]),t._v(" 实例化一个 "),s("code",[t._v("Dep")]),t._v(" 的实例，另一个是在 "),s("code",[t._v("get")]),t._v(" 函数中通过 "),s("code",[t._v("dep.depend")]),t._v(" 做依赖收集，还有个对 "),s("code",[t._v("childOb")]),t._v(" 判断的逻辑。")]),t._v(" "),s("h3",{attrs:{id:"dep"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dep"}},[t._v("#")]),t._v(" Dep")]),t._v(" "),s("p",[s("code",[t._v("Dep")]),t._v(" 是整个 getter 依赖收集的核心。")]),t._v(" "),s("p",[s("code",[t._v("Dep")]),t._v(" 是一个 Class，它定义了一些属性和方法，这里需要特别注意的是它有一个静态属性 "),s("code",[t._v("target")]),t._v("，这是一个全局唯一 "),s("code",[t._v("Watcher")]),t._v("，这是一个非常巧妙的设计，因为在同一时间只能有一个全局的 "),s("code",[t._v("Watcher")]),t._v(" 被计算，另外它的自身属性 "),s("code",[t._v("subs")]),t._v(" 也是 "),s("code",[t._v("Watcher")]),t._v(" 的数组。")]),t._v(" "),s("p",[s("code",[t._v("Dep")]),t._v(" 实际上就是对 "),s("code",[t._v("Watcher")]),t._v(" 的一种管理，"),s("code",[t._v("Dep")]),t._v(" 脱离 "),s("code",[t._v("Watcher")]),t._v(" 单独存在是没有意义的。")]),t._v(" "),s("h3",{attrs:{id:"watcher"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watcher"}},[t._v("#")]),t._v(" Watcher")]),t._v(" "),s("p",[s("code",[t._v("Watcher")]),t._v(" 是一个 Class，在它的构造函数中，定义了一些和 "),s("code",[t._v("Dep")]),t._v(" 相关的属性：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("newDeps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("depIds "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("newDepIds "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("其中，"),s("code",[t._v("this.deps")]),t._v(" 和 "),s("code",[t._v("this.newDeps")]),t._v(" 表示 "),s("code",[t._v("Watcher")]),t._v(" 实例持有的 "),s("code",[t._v("Dep")]),t._v(" 实例的数组；而 "),s("code",[t._v("this.depIds")]),t._v(" 和 "),s("code",[t._v("this.newDepIds")]),t._v(" 分别代表 "),s("code",[t._v("this.deps")]),t._v(" 和 "),s("code",[t._v("this.newDeps")]),t._v(" 的 "),s("code",[t._v("id")]),t._v(" Set。"),s("code",[t._v("Watcher")]),t._v(" 还定义了一些原型的方法，和依赖收集相关的有 "),s("code",[t._v("get")]),t._v("、"),s("code",[t._v("addDep")]),t._v(" 和 "),s("code",[t._v("cleanupDeps")]),t._v(" 方法。")]),t._v(" "),s("h3",{attrs:{id:"收集过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#收集过程"}},[t._v("#")]),t._v(" 收集过程")]),t._v(" "),s("p",[t._v("Vue 的 mount 过程是通过 "),s("code",[t._v("mountComponent")]),t._v(" 函数，其中有一段比较重要的逻辑：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("updateComponent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hydrating"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Watcher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" updateComponent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" noop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("before")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isMounted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callHook")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'beforeUpdate'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* isRenderWatcher */")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("当我们去实例化一个渲染 "),s("code",[t._v("watcher")]),t._v(" 的时候，首先进入 "),s("code",[t._v("watcher")]),t._v(" 的构造函数逻辑，然后会执行它的 "),s("code",[t._v("this.get()")]),t._v(" 方法，进入 "),s("code",[t._v("get")]),t._v(" 函数，首先会执行"),s("code",[t._v("pushTarget")]),t._v("，实际上就是"),s("strong",[t._v("把 "),s("code",[t._v("Dep.target")]),t._v(" 赋值为当前的渲染 "),s("code",[t._v("watcher")]),t._v(" 并压栈")]),t._v("（为了恢复用），接着执行"),s("code",[t._v("this.getter")]),t._v(" 对应就是 "),s("code",[t._v("updateComponent")]),t._v(" 函数，它会先执行 "),s("code",[t._v("vm._render()")]),t._v(" 方法，这个方法会生成 渲染 VNode，并且在这个过程中会对 "),s("code",[t._v("vm")]),t._v(" 上的数据访问，这个时候就触发了数据对象的 getter。")]),t._v(" "),s("p",[t._v("每个对象值的 getter 都持有一个 "),s("code",[t._v("dep")]),t._v("，在触发 getter 的时候会调用 "),s("code",[t._v("dep.depend()")]),t._v(" 方法，也就会执行 "),s("code",[t._v("Dep.target.addDep(this)")]),t._v("。这个时候 "),s("code",[t._v("Dep.target")]),t._v(" 已经被赋值为渲染 "),s("code",[t._v("watcher")]),t._v("，那么就执行到 "),s("code",[t._v("addDep")]),t._v(" 方法，这时候会做一些逻辑判断（保证同一数据不会被添加多次）后执行 "),s("code",[t._v("dep.addSub(this)")]),t._v("，那么就会执行 "),s("code",[t._v("this.subs.push(sub)")]),t._v("，也就是说"),s("strong",[t._v("把当前的 "),s("code",[t._v("watcher")]),t._v(" 订阅到这个数据持有的 "),s("code",[t._v("dep")]),t._v(" 的 "),s("code",[t._v("subs")]),t._v(" 中")]),t._v("，这个目的是为后续数据变化时候能通知到哪些 "),s("code",[t._v("subs")]),t._v(" 做准备。")]),t._v(" "),s("p",[t._v("所以在 "),s("code",[t._v("vm._render()")]),t._v(" 过程中，会触发所有数据的 getter，这样实际上已经完成了一个依赖收集的过程。")]),t._v(" "),s("p",[t._v("在完成依赖收集后，还有几个逻辑要执行，首先是"),s("code",[t._v("traverse(value)")]),t._v("，这个是要递归去访问 "),s("code",[t._v("value")]),t._v("，触发它所有子项的 "),s("code",[t._v("getter")]),t._v("。然后是"),s("code",[t._v("popTarget")]),t._v("，实际上就是把 "),s("code",[t._v("Dep.target")]),t._v(" 恢复成上一个状态，因为当前 vm 的数据依赖收集已经完成，那么对应的渲染"),s("code",[t._v("Dep.target")]),t._v(" 也需要改变。最后执行"),s("code",[t._v("this.cleanupDeps()")]),t._v("进行依赖清空。")]),t._v(" "),s("h2",{attrs:{id:"派发更新"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#派发更新"}},[t._v("#")]),t._v(" 派发更新")]),t._v(" "),s("p",[t._v("我们了解了响应式数据依赖收集过程，收集的目的就是为了当我们修改数据的时候，可以对相关的依赖派发更新。")]),t._v(" "),s("p",[s("code",[t._v("defineReactive")]),t._v("中setter 的逻辑有 2 个关键的点，一个是 "),s("code",[t._v("childOb = !shallow && observe(newVal)")]),t._v("，如果 "),s("code",[t._v("shallow")]),t._v(" 为 false 的情况，会对新设置的值变成一个响应式对象；另一个是 "),s("code",[t._v("dep.notify()")]),t._v("，通知所有的订阅者。")]),t._v(" "),s("h3",{attrs:{id:"派发过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#派发过程"}},[t._v("#")]),t._v(" 派发过程")]),t._v(" "),s("p",[t._v("当我们在组件中对响应的数据做了修改，就会触发 setter 的逻辑，最后调用 "),s("code",[t._v("dep.notify()")]),t._v(" 方法， 它是 "),s("code",[t._v("Dep")]),t._v(" 的一个实例方法。会遍历"),s("code",[t._v("dep")]),t._v("上所有的 "),s("code",[t._v("subs")]),t._v("，也就是 "),s("code",[t._v("Watcher")]),t._v(" 的实例数组，然后调用每一个 "),s("code",[t._v("watcher")]),t._v(" 的 "),s("code",[t._v("update")]),t._v(" 方法。")]),t._v(" "),s("p",[t._v("对于 "),s("code",[t._v("Watcher")]),t._v(" 的不同状态，会执行不同的逻辑，在一般组件数据更新的场景，会走到最后一个 "),s("code",[t._v("queueWatcher(this)")]),t._v(" 的逻辑，")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Array"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Watcher"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" has"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" waiting "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" flushing "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("queueWatcher")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("watcher"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Watcher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("has"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    has"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("flushing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if already flushing, splice the watcher based on its id")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if already past its id, it will be run next immediately.")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// queue the flush")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("waiting"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      waiting "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextTick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flushSchedulerQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br")])]),s("p",[t._v("这里引入了一个队列的概念，这也是 Vue 在做派发更新的时候的一个优化的点，它并不会每次数据改变都触发 "),s("code",[t._v("watcher")]),t._v(" 的回调，而是把这些 "),s("code",[t._v("watcher")]),t._v(" 先添加到一个队列里，然后在 "),s("code",[t._v("nextTick")]),t._v(" 后执行 "),s("code",[t._v("flushSchedulerQueue")]),t._v("。")]),t._v(" "),s("p",[t._v("用 "),s("code",[t._v("has")]),t._v(" 对象保证同一个 "),s("code",[t._v("Watcher")]),t._v(" 只添加一次，通过 "),s("code",[t._v("waiting")]),t._v(" 保证对 "),s("code",[t._v("nextTick(flushSchedulerQueue)")]),t._v(" 的调用逻辑只有一次。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" flushing "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Flush both queues and run the watchers.\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flushSchedulerQueue")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  flushing "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" id\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Sort queue before flush.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This ensures that:")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. Components are updated from parent to child. (because parent is always")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    created before the child)")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. A component's user watchers are run before its render watcher (because")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    user watchers are created before the render watcher)")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. If a component is destroyed during a parent component's watcher run,")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    its watchers can be skipped.")]),t._v("\n  queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do not cache length because more watchers might be pushed")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// as we run existing watchers")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    watcher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("before"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行beforeUpdate钩子")]),t._v("\n      watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("before")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id\n    has"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n    watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// in dev build, check and stop circular updates.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" has"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      circular"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("circular"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("circular"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_UPDATE_COUNT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("warn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'You may have an infinite update loop '")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user\n              "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('in watcher with expression "')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expression"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("in a component render function.")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vm\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// keep copies of post queues before resetting state")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" activatedQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" activatedChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" updatedQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resetSchedulerState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// call component updated and activated hooks")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callActivatedHooks")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("activatedQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callUpdatedHooks")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("updatedQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// devtool hook")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("devtools "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("devtools"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    devtools"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'flush'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br"),s("span",{staticClass:"line-number"},[t._v("52")]),s("br"),s("span",{staticClass:"line-number"},[t._v("53")]),s("br"),s("span",{staticClass:"line-number"},[t._v("54")]),s("br"),s("span",{staticClass:"line-number"},[t._v("55")]),s("br"),s("span",{staticClass:"line-number"},[t._v("56")]),s("br"),s("span",{staticClass:"line-number"},[t._v("57")]),s("br"),s("span",{staticClass:"line-number"},[t._v("58")]),s("br"),s("span",{staticClass:"line-number"},[t._v("59")]),s("br"),s("span",{staticClass:"line-number"},[t._v("60")]),s("br"),s("span",{staticClass:"line-number"},[t._v("61")]),s("br"),s("span",{staticClass:"line-number"},[t._v("62")]),s("br")])]),s("p",[t._v("这里有几个重要的逻辑要梳理一下:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("队列排序")]),t._v(" "),s("p",[s("code",[t._v("queue.sort((a, b) => a.id - b.id)")]),t._v(" 对队列做了从小到大的排序，这么做主要有以下要确保以下几点：")]),t._v(" "),s("ol",[s("li",[t._v("组件的更新由父到子；因为父组件的创建过程是先于子的，所以 "),s("code",[t._v("watcher")]),t._v(" 的创建也是先父后子，执行顺序也应该保持先父后子。")]),t._v(" "),s("li",[t._v("用户的自定义 "),s("code",[t._v("watcher")]),t._v(" 要优先于渲染 "),s("code",[t._v("watcher")]),t._v(" 执行；因为用户自定义 "),s("code",[t._v("watcher")]),t._v(" 是在渲染 "),s("code",[t._v("watcher")]),t._v(" 之前创建的。")]),t._v(" "),s("li",[t._v("如果一个组件在父组件的 "),s("code",[t._v("watcher")]),t._v(" 执行期间被销毁，那么它对应的 "),s("code",[t._v("watcher")]),t._v(" 执行都可以被跳过，所以父组件的 "),s("code",[t._v("watcher")]),t._v(" 应该先执行。")])])]),t._v(" "),s("li",[s("p",[t._v("队列遍历")]),t._v(" "),s("p",[t._v("在对 "),s("code",[t._v("queue")]),t._v(" 排序后，接着就是要对它做遍历，拿到对应的 "),s("code",[t._v("watcher")]),t._v("，执行 "),s("code",[t._v("watcher.run()")]),t._v("。这里需要注意一个细节，在遍历的时候每次都会对 "),s("code",[t._v("queue.length")]),t._v(" 求值，因为在 "),s("code",[t._v("watcher.run()")]),t._v(" 的时候，很可能用户会再次添加新的 "),s("code",[t._v("watcher")]),t._v("，这样会再次执行到 "),s("code",[t._v("queueWatcher")]),t._v("。")]),t._v(" "),s("p",[t._v("可以看到，这时候 "),s("code",[t._v("flushing")]),t._v(" 为 true，就会执行到 else 的逻辑，然后就会从后往前找，找到第一个待插入 "),s("code",[t._v("watcher")]),t._v(" 的 id 比当前队列中 "),s("code",[t._v("watcher")]),t._v(" 的 id 大的位置。把 "),s("code",[t._v("watcher")]),t._v(" 按照 "),s("code",[t._v("id")]),t._v("的插入到队列中，因此 "),s("code",[t._v("queue")]),t._v(" 的长度发生了变化。")])]),t._v(" "),s("li",[s("p",[t._v("状态恢复")]),t._v(" "),s("p",[t._v("这个过程就是执行 "),s("code",[t._v("resetSchedulerState")]),t._v(" 函数。逻辑非常简单，就是把这些控制流程状态的一些变量恢复到初始值，把 "),s("code",[t._v("watcher")]),t._v(" 队列清空。")])])]),t._v(" "),s("p",[s("code",[t._v("run")]),t._v(" 函数实际上就是先通过 "),s("code",[t._v("this.get()")]),t._v(" 得到它当前的值，然后做判断，如果满足新旧值不等、新值是对象类型、"),s("code",[t._v("deep")]),t._v(" 模式任何一个条件，则执行 "),s("code",[t._v("watcher")]),t._v(" 的回调，注意回调函数执行的时候会把第一个和第二个参数传入新值 "),s("code",[t._v("value")]),t._v(" 和旧值 "),s("code",[t._v("oldValue")]),t._v("，这就是当我们添加自定义 "),s("code",[t._v("watcher")]),t._v(" 的时候能在回调函数的参数中拿到新旧值的原因。")]),t._v(" "),s("p",[t._v("那么对于渲染 "),s("code",[t._v("watcher")]),t._v(" 而言，它在执行 "),s("code",[t._v("this.get()")]),t._v(" 方法求值的时候，会执行 "),s("code",[t._v("getter")]),t._v(" 方法：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("updateComponent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hydrating"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("所以这就是当我们去修改组件相关的响应式数据的时候，会触发组件重新渲染的原因，接着就会重新执行 "),s("code",[t._v("patch")]),t._v(" 的过程，但它和首次渲染有所不同。")]),t._v(" "),s("h2",{attrs:{id:"nexttick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nexttick"}},[t._v("#")]),t._v(" nextTick")]),t._v(" "),s("p",[t._v("在浏览器环境中，常见的 macro task 有 setTimeout、MessageChannel、postMessage、setImmediate；常见的 micro task 有 MutationObsever 和 Promise.then。")]),t._v(" "),s("p",[s("code",[t._v("next-tick.js")]),t._v(" 申明了 "),s("code",[t._v("microTimerFunc")]),t._v(" 和 "),s("code",[t._v("macroTimerFunc")]),t._v(" 2 个变量，它们分别对应的是 micro task 的函数和 macro task 的函数。对于 macro task 的实现，优先检测是否支持原生 "),s("code",[t._v("setImmediate")]),t._v("，这是一个高版本 IE 和 Edge 才支持的特性，不支持的话再去检测是否支持原生的 "),s("code",[t._v("MessageChannel")]),t._v("，如果也不支持的话就会降级为 "),s("code",[t._v("setTimeout 0")]),t._v("；而对于 micro task 的实现，则检测浏览器是否原生支持 "),s("code",[t._v("Promise")]),t._v("，不支持的话直接指向 macro task 的实现。")]),t._v(" "),s("p",[s("code",[t._v("next-tick.js")]),t._v(" 对外暴露了 2 个函数，先来看 "),s("code",[t._v("nextTick")]),t._v("，这就是执行 "),s("code",[t._v("nextTick(flushSchedulerQueue)")]),t._v(" 所用到的函数。它的逻辑也很简单，把传入的回调函数 "),s("code",[t._v("cb")]),t._v(" 压入 "),s("code",[t._v("callbacks")]),t._v(" 数组，最后一次性地根据 "),s("code",[t._v("useMacroTask")]),t._v(" 条件执行 "),s("code",[t._v("macroTimerFunc")]),t._v(" 或者是 "),s("code",[t._v("microTimerFunc")]),t._v("，而它们都会在下一个 tick 执行 "),s("code",[t._v("flushCallbacks")]),t._v("，"),s("code",[t._v("flushCallbacks")]),t._v(" 的逻辑非常简单，对 "),s("code",[t._v("callbacks")]),t._v(" 遍历，然后执行相应的回调函数。")]),t._v(" "),s("p",[t._v("这里使用 "),s("code",[t._v("callbacks")]),t._v(" 而不是直接在 "),s("code",[t._v("nextTick")]),t._v(" 中执行回调函数的原因是保证在同一个 tick 内多次执行 "),s("code",[t._v("nextTick")]),t._v("，不会开启多个异步任务，而把这些异步任务都压成一个同步任务，在下一个 tick 执行完毕。")]),t._v(" "),s("p",[s("code",[t._v("nextTick")]),t._v(" 函数最后还有一段逻辑，当 "),s("code",[t._v("nextTick")]),t._v(" 不传 "),s("code",[t._v("cb")]),t._v(" 参数的时候，提供一个 Promise 化的调用。")]),t._v(" "),s("p",[s("code",[t._v("next-tick.js")]),t._v(" 还对外暴露了 "),s("code",[t._v("withMacroTask")]),t._v(" 函数，它是对函数做一层包装，确保函数执行过程中对数据任意的修改，触发变化执行 "),s("code",[t._v("nextTick")]),t._v(" 的时候强制走 "),s("code",[t._v("macroTimerFunc")]),t._v("。比如对于一些 DOM 交互事件，如 "),s("code",[t._v("v-on")]),t._v(" 绑定的事件回调函数的处理，会强制走 macro task。")]),t._v(" "),s("h2",{attrs:{id:"检测变化的注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检测变化的注意事项"}},[t._v("#")]),t._v(" 检测变化的注意事项")]),t._v(" "),s("h3",{attrs:{id:"对象添加-删除属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象添加-删除属性"}},[t._v("#")]),t._v(" 对象添加/删除属性")]),t._v(" "),s("p",[t._v("对于使用 "),s("code",[t._v("Object.defineProperty")]),t._v(" 实现响应式的对象，当我们去给这个对象添加一个新的属性的时候，是不能够触发它的 setter 的。")]),t._v(" "),s("p",[t._v("但是添加新属性的场景我们在平时开发中会经常遇到，那么 Vue 为了解决这个问题，定义了一个全局 API "),s("code",[t._v("Vue.set")]),t._v(" 方法（删除则是"),s("code",[t._v("Vue.delete")]),t._v("）。")]),t._v(" "),s("p",[s("code",[t._v("set")]),t._v(" 方法接收 3个参数，"),s("code",[t._v("target")]),t._v(" 可能是数组或者是普通对象，"),s("code",[t._v("key")]),t._v(" 代表的是数组的下标或者是对象的键值，"),s("code",[t._v("val")]),t._v(" 代表添加的值。首先判断如果 "),s("code",[t._v("target")]),t._v(" 是数组且 "),s("code",[t._v("key")]),t._v(" 是一个合法的下标，则之前通过 "),s("code",[t._v("splice")]),t._v(" 去添加进数组然后返回，这里的 "),s("code",[t._v("splice")]),t._v(" 其实已经不仅仅是原生数组的 "),s("code",[t._v("splice")]),t._v(" 了。接着又判断 "),s("code",[t._v("key")]),t._v(" 已经存在于 "),s("code",[t._v("target")]),t._v(" 中，则直接赋值返回，因为这样的变化是可以观测到了。接着再获取到 "),s("code",[t._v("target.__ob__")]),t._v(" 并赋值给 "),s("code",[t._v("ob")]),t._v("，之前分析过它是在 "),s("code",[t._v("Observer")]),t._v(" 的构造函数执行的时候初始化的，表示 "),s("code",[t._v("Observer")]),t._v(" 的一个实例，如果它不存在，则说明 "),s("code",[t._v("target")]),t._v(" 不是一个响应式的对象，则直接赋值并返回。最后通过 "),s("code",[t._v("defineReactive(ob.value, key, val)")]),t._v(" 把新添加的属性变成响应式对象，然后再通过 "),s("code",[t._v("ob.dep.notify()")]),t._v(" 手动的触发依赖通知。")]),t._v(" "),s("h3",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("p",[t._v("Vue 是不能检测到以下变动的数组：")]),t._v(" "),s("p",[t._v("1.当你利用索引直接设置一个项时，例如："),s("code",[t._v("vm.items[indexOfItem] = newValue")])]),t._v(" "),s("p",[t._v("2.当你修改数组的长度时，例如："),s("code",[t._v("vm.items.length = newLength")])]),t._v(" "),s("p",[t._v("对于第一种情况，可以使用："),s("code",[t._v("Vue.set(example1.items, indexOfItem, newValue)")]),t._v("；而对于第二种情况，可以使用 "),s("code",[t._v("vm.items.splice(newLength)")]),t._v("。")]),t._v(" "),s("p",[t._v("在通过 "),s("code",[t._v("observe")]),t._v(" 方法去观察对象的时候会实例化 "),s("code",[t._v("Observer")]),t._v("，在它的构造函数中是专门对数组做了处理。")]),t._v(" "),s("p",[s("code",[t._v("arrayMethods")]),t._v(" 首先继承了 "),s("code",[t._v("Array")]),t._v("，然后对数组中所有能改变数组自身的方法，如 "),s("code",[t._v("push、pop、shift、unshift、splice、sort、reverse")]),t._v(" 这些方法进行重写。重写后的方法会先执行它们本身原有的逻辑，并对能增加数组长度的 3 个方法 "),s("code",[t._v("push、unshift、splice")]),t._v(" 方法做了判断，获取到插入的值，然后把新添加的值变成一个响应式对象，并且再调用 "),s("code",[t._v("ob.dep.notify()")]),t._v(" 手动触发依赖通知，这就很好地解释了之前的示例中调用 "),s("code",[t._v("vm.items.splice(newLength)")]),t._v(" 方法可以检测到变化。")]),t._v(" "),s("h2",{attrs:{id:"computed-vs-watch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#computed-vs-watch"}},[t._v("#")]),t._v(" computed vs watch")]),t._v(" "),s("h3",{attrs:{id:"用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),s("p",[t._v("计算属性本质上是 "),s("code",[t._v("computed watcher")]),t._v("，而侦听属性本质上是 "),s("code",[t._v("user watcher")]),t._v("。就应用场景而言，计算属性适合用在模板渲染中，某个值是依赖了其它的响应式对象甚至是计算属性计算而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。")]),t._v(" "),s("p",[t._v("同时我们又了解了 "),s("code",[t._v("watcher")]),t._v(" 的 4 个 "),s("code",[t._v("options")]),t._v("，通常我们会在创建 "),s("code",[t._v("user watcher")]),t._v(" 的时候配置 "),s("code",[t._v("deep")]),t._v(" 和 "),s("code",[t._v("sync")]),t._v("，可以根据不同的场景做相应的配置。")]),t._v(" "),s("h3",{attrs:{id:"computed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#computed"}},[t._v("#")]),t._v(" computed")]),t._v(" "),s("p",[t._v("计算属性的初始化是发生在 Vue 实例初始化阶段的 "),s("code",[t._v("initState")]),t._v(" 函数中，执行了 "),s("code",[t._v("if (opts.computed) initComputed(vm, opts.computed)")]),t._v("。")]),t._v(" "),s("p",[t._v("函数首先创建 "),s("code",[t._v("vm._computedWatchers")]),t._v(" 为一个空对象，接着对 "),s("code",[t._v("computed")]),t._v(" 对象做遍历，拿到计算属性的每一个 "),s("code",[t._v("userDef")]),t._v("，然后尝试获取这个 "),s("code",[t._v("userDef")]),t._v(" 对应的 "),s("code",[t._v("getter")]),t._v(" 函数，拿不到则在开发环境下报警告。接下来为每一个 "),s("code",[t._v("getter")]),t._v(" 创建一个 "),s("code",[t._v("watcher")]),t._v("，这个 "),s("code",[t._v("watcher")]),t._v(" 和渲染 "),s("code",[t._v("watcher")]),t._v(" 有一点很大的不同，它是一个 "),s("code",[t._v("computed watcher")]),t._v("，因为 "),s("code",[t._v("const computedWatcherOptions = { computed: true }")]),t._v("。")]),t._v(" "),s("p",[t._v("最后对判断如果 "),s("code",[t._v("key")]),t._v(" 不是 "),s("code",[t._v("vm")]),t._v(" 的属性，则调用 "),s("code",[t._v("defineComputed(vm, key, userDef)")]),t._v("，否则判断计算属性对于的 "),s("code",[t._v("key")]),t._v(" 是否已经被 "),s("code",[t._v("data")]),t._v(" 或者 "),s("code",[t._v("prop")]),t._v(" 所占用，如果是的话则在开发环境报相应的警告。")]),t._v(" "),s("p",[s("code",[t._v("defineComputed")]),t._v(" 的实现是利用 "),s("code",[t._v("Object.defineProperty")]),t._v(" 给计算属性对应的 "),s("code",[t._v("key")]),t._v(" 值添加 getter 和 setter，setter 通常是计算属性是一个对象，并且拥有 "),s("code",[t._v("set")]),t._v(" 方法的时候才有，否则是一个空函数。最终 getter 对应的是 "),s("code",[t._v("createComputedGetter(key)")]),t._v(" 的返回值。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createComputedGetter")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computedGetter")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" watcher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_computedWatchers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_computedWatchers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("depend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("evaluate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n  * Evaluate and return the value of the watcher.\n  * This only gets called for computed property watchers.\n  */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("evaluate")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dirty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dirty "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[s("code",[t._v("evaluate")]),t._v(" 的逻辑非常简单，判断 "),s("code",[t._v("this.dirty")]),t._v("，如果为 "),s("code",[t._v("true")]),t._v(" 则通过 "),s("code",[t._v("this.get()")]),t._v(" 求值，然后把 "),s("code",[t._v("this.dirty")]),t._v(" 设置为 false。在求值过程中，会执行 "),s("code",[t._v("value = this.getter.call(vm, vm)")]),t._v("，这实际上就是执行了计算属性定义的 "),s("code",[t._v("getter")]),t._v(" 函数。")]),t._v(" "),s("p",[t._v("一旦我们对计算属性依赖的数据做修改，则会触发 setter 过程，通知所有订阅它变化的 "),s("code",[t._v("watcher")]),t._v(" 更新，执行 "),s("code",[t._v("watcher.update()")]),t._v(" 方法。渲染 "),s("code",[t._v("watcher")]),t._v(" 订阅了这个 "),s("code",[t._v("computed watcher")]),t._v(" 的变化，函数会重新计算，然后对比新旧值，如果变化了则执行回调函数，那么这里这个回调函数是 "),s("code",[t._v("this.dep.notify()")]),t._v("，在我们这个场景下就是触发了渲染 "),s("code",[t._v("watcher")]),t._v(" 重新渲染。并且将"),s("code",[t._v("this.dirty = false")]),t._v(",下次再通过"),s("code",[t._v("evaluate")]),t._v("获取值时则不会重新计算。"),s("strong",[t._v("不仅仅是计算属性依赖的值发生变化，而是当计算属性最终计算的值发生变化才会触发渲染 "),s("code",[t._v("watcher")]),t._v(" 重新渲染")]),t._v("，本质上是一种优化。")]),t._v(" "),s("h3",{attrs:{id:"watch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watch"}},[t._v("#")]),t._v(" watch")]),t._v(" "),s("p",[t._v("侦听属性的初始化也是发生在 Vue 的实例初始化阶段的 "),s("code",[t._v("initState")]),t._v(" 函数中，在 "),s("code",[t._v("computed")]),t._v(" 初始化之后，执行了"),s("code",[t._v("initWatch")]),t._v("，这里就是对 "),s("code",[t._v("watch")]),t._v(" 对象做遍历，拿到每一个 "),s("code",[t._v("handler")]),t._v("，因为 Vue 是支持 "),s("code",[t._v("watch")]),t._v(" 的同一个 "),s("code",[t._v("key")]),t._v(" 对应多个 "),s("code",[t._v("handler")]),t._v("，所以如果 "),s("code",[t._v("handler")]),t._v(" 是一个数组，则遍历这个数组，调用 "),s("code",[t._v("createWatcher")]),t._v(" 方法，否则直接调用 "),s("code",[t._v("createWatcher")]),t._v("，首先对 "),s("code",[t._v("hanlder")]),t._v(" 的类型做判断，拿到它最终的回调函数，最后调用 "),s("code",[t._v("vm.$watch(keyOrFn, handler, options)")]),t._v(" 函数，"),s("code",[t._v("$watch")]),t._v(" 是 Vue 原型上的方法，它是在执行 "),s("code",[t._v("stateMixin")]),t._v(" 的时候定义的。")]),t._v(" "),s("p",[t._v("侦听属性 "),s("code",[t._v("watch")]),t._v(" 最终会调用 "),s("code",[t._v("$watch")]),t._v(" 方法，这个方法首先判断 "),s("code",[t._v("cb")]),t._v(" 如果是一个对象，则调用 "),s("code",[t._v("createWatcher")]),t._v(" 方法，这是因为 "),s("code",[t._v("$watch")]),t._v(" 方法是用户可以直接调用的，它可以传递一个对象，也可以传递函数。接着执行 "),s("code",[t._v("const watcher = new Watcher(vm, expOrFn, cb, options)")]),t._v(" 实例化了一个 "),s("code",[t._v("watcher")]),t._v("，这里需要注意一点这是一个 "),s("code",[t._v("user watcher")]),t._v("，因为 "),s("code",[t._v("options.user = true")]),t._v("。通过实例化 "),s("code",[t._v("watcher")]),t._v(" 的方式，一旦我们 "),s("code",[t._v("watch")]),t._v(" 的数据发送变化，它最终会执行 "),s("code",[t._v("watcher")]),t._v(" 的 "),s("code",[t._v("run")]),t._v(" 方法，执行回调函数 "),s("code",[t._v("cb")]),t._v("，并且如果我们设置了 "),s("code",[t._v("immediate")]),t._v(" 为 true，则直接会执行回调函数 "),s("code",[t._v("cb")]),t._v("。最后返回了一个 "),s("code",[t._v("unwatchFn")]),t._v(" 方法，它会调用 "),s("code",[t._v("teardown")]),t._v(" 方法去移除这个 "),s("code",[t._v("watcher")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"watcher-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#watcher-options"}},[t._v("#")]),t._v(" Watcher options")]),t._v(" "),s("ul",[s("li",[t._v("deep watcher")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("watch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    deep"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newVal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("这样就创建了一个 "),s("code",[t._v("deep watcher")]),t._v(" 了，在 "),s("code",[t._v("watcher")]),t._v(" 执行 "),s("code",[t._v("get")]),t._v(" 求值的过程中有一段逻辑，在对 watch 的表达式或者函数求值后，会调用 "),s("code",[t._v("traverse")]),t._v(" 函数，它实际上就是对一个对象做深层递归遍历，因为遍历过程中就是对一个子对象的访问，会触发它们的 getter 过程，这样就可以收集到依赖，也就是订阅它们变化的 "),s("code",[t._v("watcher")]),t._v("，这个函数实现还有一个小的优化，遍历过程中会把子响应式对象通过它们的 "),s("code",[t._v("dep id")]),t._v(" 记录到 "),s("code",[t._v("seenObjects")]),t._v("，避免以后重复访问。")]),t._v(" "),s("p",[t._v("那么在执行了 "),s("code",[t._v("traverse")]),t._v(" 后，我们再对 watch 的对象内部任何一个值做修改，也会调用 "),s("code",[t._v("watcher")]),t._v(" 的回调函数了。但是因为设置了 "),s("code",[t._v("deep")]),t._v(" 后会执行 "),s("code",[t._v("traverse")]),t._v(" 函数，会有一定的性能开销，所以一定要根据应用场景权衡是否要开启这个配置。")]),t._v(" "),s("ul",[s("li",[t._v("user watcher")])]),t._v(" "),s("p",[t._v("通过 "),s("code",[t._v("vm.$watch")]),t._v(" 创建的 "),s("code",[t._v("watcher")]),t._v(" 是一个 "),s("code",[t._v("user watcher")]),t._v("，其实它的功能很简单，在对 "),s("code",[t._v("watcher")]),t._v(" 求值以及在执行回调函数的时候，会处理一下错误。")]),t._v(" "),s("ul",[s("li",[t._v("computed watcher")]),t._v(" "),s("li",[t._v("sync watcher")])]),t._v(" "),s("p",[t._v("当响应式数据发送变化后，触发了 "),s("code",[t._v("watcher.update()")]),t._v("，只是把这个 "),s("code",[t._v("watcher")]),t._v(" 推送到一个队列中，在 "),s("code",[t._v("nextTick")]),t._v(" 后才会真正执行 "),s("code",[t._v("watcher")]),t._v(" 的回调函数。而一旦我们设置了 "),s("code",[t._v("sync")]),t._v("，就可以在当前 "),s("code",[t._v("Tick")]),t._v(" 中同步执行 "),s("code",[t._v("watcher")]),t._v(" 的回调函数。只有当我们需要 watch 的值的变化到执行 "),s("code",[t._v("watcher")]),t._v(" 的回调函数是一个同步过程的时候才会去设置该属性为 true。")]),t._v(" "),s("blockquote",[s("p",[t._v("整理自 https://ustbhuangyi.github.io/vue-analysis")])])])}),[],!1,null,null,null);e.default=n.exports}}]);